{"ast":null,"code":"export default class TweetService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n  }\n\n  async postTweet(text) {\n    const tweet = {\n      id: Date.now(),\n      createdAt: new Date(),\n      name: 'Kevin',\n      username: 'kevin',\n      text\n    };\n    this.tweets.push(tweet);\n    return tweet;\n  }\n\n  async deleteTweet(tweetId) {\n    this.tweets = this.tweets.filter(tweet => tweet.id !== tweetId);\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find(tweet => tweet.id === tweetId);\n\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n\n    tweet.text = text;\n    return tweet;\n  }\n\n}","map":{"version":3,"sources":["/Users/jyp/Documents/Rocket/gitblog/Node-JS/blue-bird/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","tweet","id","Date","now","createdAt","name","tweets","push","deleteTweet","tweetId","filter","updateTweet","find"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAASG,KAAM,EAAhC,EAAmC;AAC7DG,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFoD,KAAnC,CAA5B;AAIA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;AACF;;AAEc,QAATC,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMC,KAAK,GAAG;AACZC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADQ;AAEZC,MAAAA,SAAS,EAAE,IAAIF,IAAJ,EAFC;AAGZG,MAAAA,IAAI,EAAE,OAHM;AAIZlB,MAAAA,QAAQ,EAAE,OAJE;AAKZY,MAAAA;AALY,KAAd;AAOA,SAAKO,MAAL,CAAYC,IAAZ,CAAiBP,KAAjB;AAEA,WAAOA,KAAP;AACD;;AAEgB,QAAXQ,WAAW,CAACC,OAAD,EAAU;AACzB,SAAKH,MAAL,GAAc,KAAKA,MAAL,CAAYI,MAAZ,CAAoBV,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaQ,OAA3C,CAAd;AACD;;AAEgB,QAAXE,WAAW,CAACF,OAAD,EAAUV,IAAV,EAAgB;AAC/B,UAAMC,KAAK,GAAG,KAAKM,MAAL,CAAYM,IAAZ,CAAkBZ,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaQ,OAAzC,CAAd;;AACA,QAAI,CAACT,KAAL,EAAY;AACV,YAAM,IAAIJ,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACDI,IAAAA,KAAK,CAACD,IAAN,GAAaA,IAAb;AACA,WAAOC,KAAP;AACD;;AAxC+B","sourcesContent":["export default class TweetService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n  }\n\n  async postTweet(text) {\n    const tweet = {\n      id: Date.now(),\n      createdAt: new Date(),\n      name: 'Kevin',\n      username: 'kevin',\n      text,\n    };\n    this.tweets.push(tweet);\n\n    return tweet;\n  }\n\n  async deleteTweet(tweetId) {\n    this.tweets = this.tweets.filter((tweet) => tweet.id !== tweetId);\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find((tweet) => tweet.id === tweetId);\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n    tweet.text = text;\n    return tweet;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}