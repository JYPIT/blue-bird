{"ast":null,"code":"export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = this.http.fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`${this.baseURL}/tweets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        username: 'kevin',\n        name: 'Kevin'\n      })\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = this.http.fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/jyp/Documents/Rocket/gitblog/Node-JS/blue-bird/client/src/service/tweet.js"],"names":["TweetService","constructor","http","getTweets","username","query","response","fetch","baseURL","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AACc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,UAAME,QAAQ,GAAG,KAAKJ,IAAL,CAAUK,KAAV,CAAiB,GAAE,KAAKC,OAAQ,UAASH,KAAM,EAA/C,EAAkD;AACjEI,MAAAA,MAAM,EAAE,KADyD;AAEjEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFwD,KAAlD,CAAjB;AAIA,UAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;;AACA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,WAAO,KAAKf,IAAL,CAAUK,KAAV,CAAiB,GAAE,KAAKC,OAAQ,SAAhC,EAA0C;AAC/CC,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsC;AAG/CQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA,IAAF;AAAQb,QAAAA,QAAQ,EAAE,OAAlB;AAA2BiB,QAAAA,IAAI,EAAE;AAAjC,OAAf;AAHyC,KAA1C,CAAP;AAKD;;AAEgB,QAAXC,WAAW,CAACC,OAAD,EAAU;AACzB,WAAO,KAAKrB,IAAL,CAAUK,KAAV,CAAiB,GAAE,KAAKC,OAAQ,WAAUe,OAAQ,EAAlD,EAAqD;AAC1Dd,MAAAA,MAAM,EAAE,QADkD;AAE1DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFiD,KAArD,CAAP;AAID;;AAEgB,QAAXc,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,UAAMX,QAAQ,GAAG,KAAKJ,IAAL,CAAUK,KAAV,CAAiB,GAAE,KAAKC,OAAQ,WAAUe,OAAQ,EAAlD,EAAqD;AACpEd,MAAAA,MAAM,EAAE,KAD4D;AAEpEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF2D;AAGpEQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA;AAAF,OAAf;AAH8D,KAArD,CAAjB;AAKA,UAAMN,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;;AACA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AA3C+B","sourcesContent":["export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = this.http.fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`${this.baseURL}/tweets`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, username: 'kevin', name: 'Kevin' }),\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = this.http.fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}